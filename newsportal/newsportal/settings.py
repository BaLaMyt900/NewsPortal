"""
Django settings for newsportal project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import find_dotenv, load_dotenv

load_dotenv(find_dotenv(filename='email_config.env'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+$hgla951!0sm16@m9maf41wdz4z42nhtano7_@j1x+&82s2*8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'portal.app.PortalConfig',
    'posts',
    'my_account'
]

LOGIN_URL = '/account/login/'

SITE_ID = 1

AUTH_USER_MODEL = 'portal.PortalUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'newsportal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
                'newsportal.context_processor.get_context_data'
            ],
        },
    },
]

# LOGIN

LOGIN_REDIRECT_URL = '/'
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_VERIFICATION = 'optional'
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_QUERY_EMAIL = True
ACCOUNT_FORMS = {
    'signup': 'my_account.forms.UserRegistraionForm',
    'email': 'my_account.forms.EmailForm'
}
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# EMAIL

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = os.environ.get('LOGIN')
EMAIL_HOST_PASSWORD = os.environ.get('PASSWORD')
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = f'{os.environ.get("LOGIN")}@yandex.ru'
MANAGERS = []  # Список менеджеров для рассылки. Строки через запятую

# SCHEDULER
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

WSGI_APPLICATION = 'newsportal.wsgi.application'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CELERY

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Logs

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'style': '{',
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'warning': {
            'format': '%(levelname)s %(pathname)s %(message)s'
        },
        'err&crit': {
            'format': '%(levelname)s %(pathname)s %(exc_info)s %(message)s'
        },
        'general': {
            'format': '%(asctime)s - %(levelname)s - %(module)s - %(message)s'
        },
        'errors': {
            'format': '%(asctime)s - %(levelname)s - %(message)s - %(pathname)s - %(exc_info)s'
        },
        'errors_mail': {
            'format': '%(asctime)s - %(levelname)s - %(message)s - %(pathname)s'
        }
    },
    'filters': {
        'debug': {'()': 'newsportal.log_filter.LevelDebug'},
        'info': {'()': 'newsportal.log_filter.LevelInfo'},
        'warning': {'()': 'newsportal.log_filter.LevelWarning'},
        'error': {'()': 'newsportal.log_filter.LevelError'},
        'critical': {'()': 'newsportal.log_filter.LevelCritical'},
        "debug_true": {"()": "django.utils.log.RequireDebugTrue"},
        "debug_false": {"()": "django.utils.log.RequireDebugFalse"}
    },
    'handlers': {
        'console_debug': {
            'filters': ['debug', 'debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_info': {
            'filters': ['info', 'debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_warn': {
            'filters': ['warning', 'debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'warning'
        },
        'console_err&crit': {
            'filters': ['error', 'critical', 'debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'err&crit'
        },
        'general': {
            'filters': ['debug_false'],
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': f'{os.path.join(BASE_DIR, "logs")}/general.log',
            'formatter': 'general'
        },
        'errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': f'{os.path.join(BASE_DIR, "logs")}/errors.log',
            'formatter': 'errors'
        },
        'security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': f'{os.path.join(BASE_DIR, "logs")}/security.log',
            'formatter': 'general'
        },
        'mail_admin': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'errors_mail'
        }
    },
    'loggers': {
        'django': {
            'handlers': [
                'console_debug',
                'console_info',
                'console_warn',
                'console_err&crit',
                'general'
            ],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['errors', 'mail_admin'],
            'propagate': True
        },
        'django.server': {
            'handlers': ['errors', 'mail_admin'],
            'propagate': True
        },
        'django.template': {
            'handlers': ['errors'],
            'propagate': True
        },
        'django.db.backends': {
            'handlers': ['errors'],
            'propagate': True
        },
        'django.security': {
            'handlers': ['security'],
            'propagate': True
        },
    }
}
