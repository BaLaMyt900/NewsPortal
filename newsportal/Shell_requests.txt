# Импорт моделей из проекта
from portal.models import PortalUser, Author, Category, Post, Comment, PostCategory

# Создание пользователей
user1 = PortalUser.objects.create_user("shell_user1")
user2 = PortalUser.objects.create_user("shell_user2")

# Добавление категорий
Category.objects.create(name="Категория из shell")

# Создание автора. По умолчанию пользователь - просто пользователь. Автором он может стать из личного кабинета. Второй пользователь просто пользователь
author1 = Author.objects.create(user=user1)

# Добавление статей и сразу добавление категорий
post1 = Post.objects.create(title="Заголовок статьи из shell", text="Текст статьи из shell", type="A", author=author1)
PostCategory.objects.create(post=post1,category=Category.objects.get(name="Категория из shell"))
post2 = Post.objects.create(title="Заголовок статьи из shell 2", text="Текст статьи из shell 2", type="A", author=author1)
PostCategory.objects.create(post=post2,category=Category.objects.get(name="Экономика"))
PostCategory.objects.create(post=post2,category=Category.objects.get(name="Происшествия"))
post3 = Post.objects.create(title="Заголовок новости из shell", text="Текст новости из shell", type="N", author=author1)
PostCategory.objects.create(post=post3,category=Category.objects.get(name="Категория из shell"))

# Добавлиение коментариев
comm1 = Comment.objects.create(post=post1, user=user2, text="Комментарий от 2го пользователя на первую статью")
comm2 = Comment.objects.create(post=post2, user=user2, text="Комментарий от 2го пользователя на Вторую статью")
comm3 = Comment.objects.create(post=post3, user=user1, text="Комментарий от первого пользователя(автора статьи) на третью статью")
comm4 = Comment.objects.create(post=post3, user=user2, text="Комментарий от 2го пользователя на третью статью")
comm5 = Comment.objects.create(post=post1, user=user2, text="Второй Комментарий от 2го пользователя на первую статью")

# Лайки, дизлайки У меня реализована система единичного оценивания коммента или статьи. Поэтому нужно передавать пользователя для проверки
comm1.like(user1)
comm2.dislike(user1)
comm3.like(user2)
comm4.dislike(user1)
post1.like(user2)
post2.dislike(user2)

# Обновление рейтингов
user1.update_rating()
user2.update_rating()

# Вывод лучшего пользователя
best_user = PortalUser.objects.all().order_by("-rating")[0]
print(f"{best_user.username} {best_user.rating}")

# Вывод лучшей статьи
best_post = Post.objects.all().order_by("-rating")[0]
print(f"{best_post.post_time} {best_post.author.user.username} {best_post.rating} {best_post.title} {best_post.text[:30]}")

# Вывод комментариев лучшей статьи
best_post_comments = Comment.objects.filter(post=best_post)
for comment in best_post_comments:
    print(f"{comment.date} {comment.user} {comment.rating} {comment.text}")
